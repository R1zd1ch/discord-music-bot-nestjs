import { Injectable, Logger } from '@nestjs/common';
import {
  Context,
  ContextOf,
  On,
  Once,
  Options,
  SlashCommand,
  SlashCommandContext,
} from 'necord';
import { PlayDto } from './dtos/play.dto';
import { VoiceService } from './voice.service';
import { YandexMusicService } from 'src/yandex-music/yandex-music.service';
import { GuildMember, VoiceState } from 'discord.js';
import { UserService } from 'src/user/user.service';

@Injectable()
export class DiscordBotService {
  constructor(
    private readonly voiceService: VoiceService,
    private readonly yandexMusicService: YandexMusicService,
    private readonly userService: UserService,
  ) {}
  private readonly logger = new Logger(DiscordBotService.name);
  private inactivityTimers = new Map<string, NodeJS.Timeout>();
  @SlashCommand({ name: 'ping', description: 'Pong!' })
  public async onPing(@Context() [interaction]: SlashCommandContext) {
    return interaction.reply({ content: 'Pong!' });
  }
  @Once('ready') // –ö–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
  onReady() {
    this.logger.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  }

  @SlashCommand({
    name: 'play',
    description: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–∏ÃÜ–ª–∏—Å—Ç',
  })
  async play(
    @Context() [interaction]: SlashCommandContext,
    @Options() { url }: PlayDto,
  ) {
    console.log(url);
    const member = interaction.member as GuildMember;
    const userId = interaction.user.id;
    await this.checkExistUser(userId);
    if (!member || !member.voice.channel) {
      return interaction.reply({
        content: '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!',
        ephemeral: true,
      });
    }
    if (!interaction.guild) {
      return interaction.reply({
        content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ!',
        ephemeral: true,
      });
    }

    console.log(
      interaction.guild.id,
      member.voice.channel.id,
      interaction.guild.voiceAdapterCreator,
      interaction.user.id,
      url,
    );

    await this.voiceService.playAudio(
      interaction.guild.id,
      member.voice.channel.id,
      interaction.guild.voiceAdapterCreator,
      interaction.user.id,
      url,
      [interaction],
    );
  }

  private async checkExistUser(discordId: string) {
    const user = await this.userService.getUser(discordId);
    if (!user) await this.userService.create(discordId);
  }

  @On('messageCreate')
  async onMessageCreate(@Context() [message]: ContextOf<'messageCreate'>) {
    console.log(message.embeds);
    if (message.author.bot) return;

    if (message.content === 'ping') {
      await message.reply('pong');
    }
  }

  @On('voiceStateUpdate')
  async onVoiceStateUpdate(
    @Context() [voiceState]: ContextOf<'voiceStateUpdate'>,
  ) {
    // this.logger.debug(voiceState.member?.user.bot);
    // this.logger.debug(voiceState.member);
  }

  // @On('voiceStateUpdate')
  // async handleVoiceStatusUpdate(oldState: VoiceState, newState: VoiceState) {
  //   const voiceChannel = newState.channel || oldState.channel;
  //   if (!voiceChannel) return;

  //   const members = voiceChannel.members.filter((member) => !member.user.bot);
  //   const guildId = voiceChannel.guild.id;

  //   if (members.size === 0) {
  //     this.startInactivityTimer(voiceChannel.id, guildId);
  //   } else {
  //     this.clearInactivityTimer(voiceChannel.id);
  //   }
  // }

  // private startInactivityTimer(channelId: string, guildId: string) {
  //   if (this.inactivityTimers.has(channelId)) return;

  //   this.logger.log(`üïí –¢–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${channelId}`);

  //   const timeout = setTimeout(
  //     async () => {
  //       const channel = await ;
  //       if (channel?.isVoiceBased()) {
  //         const voiceChannel = channel as any;
  //         const members = voiceChannel.members.filter(
  //           (member) => !member.user.bot,
  //         );

  //         if (members.size === 0) {
  //           this.logger.log(
  //             `üîá –ü–æ–∫–∏–¥–∞–µ–º –∫–∞–Ω–∞–ª ${channelId} (–≥–∏–ª—å–¥–∏—è ${guildId})`,
  //           );
  //           voiceChannel.leave();
  //         }
  //       }
  //       this.inactivityTimers.delete(channelId);
  //     },
  //     10 * 60 * 1000,
  //   ); // 10 –º–∏–Ω—É—Ç

  //   this.inactivityTimers.set(channelId, timeout);
  // }
  // private clearInactivityTimer(channelId: string) {
  //   if (this.inactivityTimers.has(channelId)) {
  //     clearTimeout(this.inactivityTimers.get(channelId));
  //     this.inactivityTimers.delete(channelId);
  //     this.logger.log(`‚úÖ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${channelId}`);
  //   }
  // }
}
